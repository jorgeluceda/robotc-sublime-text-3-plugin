{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"firstLineMatch": "-[*]-( Mode:)? C -[*]-",
	"foldingStartMarker": "(?x)\n\t\t /\\*\\*(?!\\*)\n\t\t|^(?![^{]*?//|[^{]*?/\\*(?!.*?\\*/.*?\\{)).*?\\{\\s*($|//|/\\*(?!.*?\\*/.*\\S))\n\t",
	"foldingStopMarker": "(?<!\\*)\\*\\*/|^\\s*\\}",
	"keyEquivalent": "^~C",
	"name": "Robot C",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#comments"
		},
		{
			"match": "\\b(break|case|continue|default|do|else|for|goto|if|_Pragma|return|switch|while)\\b",
			"name": "keyword.control.c"
		},
		{
			"match": "\\b(asm|__asm__|auto|bool|_Bool|char|_Complex|double|enum|float|_Imaginary|int|long|short|signed|struct|typedef|union|unsigned|void)\\b",
			"name": "storage.type.c"
		},
		{
			"match": "\\b(const|extern|register|restrict|static|volatile|inline)\\b",
			"name": "storage.modifier.c"
		},
		{
			"comment": "common C constant naming idiom -- kConstantVariable",
			"match": "\\bk[A-Z]\\w*\\b",
			"name": "constant.other.variable.mac-classic.c"
		},
		{
			"match": "\\bg[A-Z]\\w*\\b",
			"name": "variable.other.readwrite.global.mac-classic.c"
		},
		{
			"match": "\\bs[A-Z]\\w*\\b",
			"name": "variable.other.readwrite.static.mac-classic.c"
		},
		{
			"match": "\\b(NULL|true|false|TRUE|FALSE)\\b",
			"name": "constant.language.c"
		},
		{
			"match": "\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b",
			"name": "constant.numeric.c"
		},
		{
			"match": "\\b(u_char|u_short|u_int|u_long|ushort|uint|u_quad_t|quad_t|qaddr_t|caddr_t|daddr_t|dev_t|fixpt_t|blkcnt_t|blksize_t|gid_t|in_addr_t|in_port_t|ino_t|key_t|mode_t|nlink_t|id_t|pid_t|off_t|segsz_t|swblk_t|uid_t|id_t|clock_t|size_t|ssize_t|time_t|useconds_t|suseconds_t)\\b",
			"name": "support.type.sys-types.c"
		},
		{
			"match": "\\b(pthread_attr_t|pthread_cond_t|pthread_condattr_t|pthread_mutex_t|pthread_mutexattr_t|pthread_once_t|pthread_rwlock_t|pthread_rwlockattr_t|pthread_t|pthread_key_t)\\b",
			"name": "support.type.pthread.c"
		},
		{
			"match": "\\b(int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|int_least8_t|int_least16_t|int_least32_t|int_least64_t|uint_least8_t|uint_least16_t|uint_least32_t|uint_least64_t|int_fast8_t|int_fast16_t|int_fast32_t|int_fast64_t|uint_fast8_t|uint_fast16_t|uint_fast32_t|uint_fast64_t|intptr_t|uintptr_t|intmax_t|intmax_t|uintmax_t|uintmax_t)\\b",
			"name": "support.type.stdint.c"
		},
		{
			"match": "\\b(noErr|kNilOptions|kInvalidID|kVariableLengthArray)\\b",
			"name": "support.constant.mac-classic.c"
		},
		{
			"match": "\\b(AbsoluteTime|Boolean|Byte|ByteCount|ByteOffset|BytePtr|CompTimeValue|ConstLogicalAddress|ConstStrFileNameParam|ConstStringPtr|Duration|Fixed|FixedPtr|Float32|Float32Point|Float64|Float80|Float96|FourCharCode|Fract|FractPtr|Handle|ItemCount|LogicalAddress|OptionBits|OSErr|OSStatus|OSType|OSTypePtr|PhysicalAddress|ProcessSerialNumber|ProcessSerialNumberPtr|ProcHandle|Ptr|ResType|ResTypePtr|ShortFixed|ShortFixedPtr|SignedByte|SInt16|SInt32|SInt64|SInt8|Size|StrFileName|StringHandle|StringPtr|TimeBase|TimeRecord|TimeScale|TimeValue|TimeValue64|UInt16|UInt32|UInt64|UInt8|UniChar|UniCharCount|UniCharCountPtr|UniCharPtr|UnicodeScalarValue|UniversalProcHandle|UniversalProcPtr|UnsignedFixed|UnsignedFixedPtr|UnsignedWide|UTF16Char|UTF32Char|UTF8Char)\\b",
			"name": "support.type.mac-classic.c"
		}
	
	],
	"repository": {
		"keywords": {
			"patterns": [{
				"name": "keyword.control.robotc",
				"match": "\\b(if|while|for|return)\\b"
			}]
		},
		"strings": {
			"name": "string.quoted.double.robotc",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.robotc",
					"match": "\\\\."
				}
			]
		},
		"comments": {
			"patterns": [
			  {
				"captures": {
				  "1": {
					"name": "meta.toc-list.banner.block.c"
				  }
				},
				"match": "^/\\* =(\\s*.*?)\\s*= \\*/$\\n?",
				"name": "comment.block.c"
			  },
			  {
				"begin": "/\\*",
				"captures": {
				  "0": {
					"name": "punctuation.definition.comment.c"
				  }
				},
				"end": "\\*/",
				"name": "comment.block.c"
			  },
			  {
				"match": "\\*/.*\\n",
				"name": "invalid.illegal.stray-comment-end.c"
			  },
			  {
				"captures": {
				  "1": {
					"name": "meta.toc-list.banner.line.c"
				  }
				},
				"match": "^// =(\\s*.*?)\\s*=\\s*$\\n?",
				"name": "comment.line.banner.c++"
			  },
			  {
				"begin": "//",
				"beginCaptures": {
				  "0": {
					"name": "punctuation.definition.comment.c"
				  }
				},
				"end": "$\\n?",
				"name": "comment.line.double-slash.c++",
				"patterns": [
				  {
					"match": "(?>\\\\\\s*\\n)",
					"name": "punctuation.separator.continuation.c++"
				  }
				]
			  }
			]
		  }
	},
	"scopeName": "source.c"
}